00:01 It's pretty awesome that we can be over in this console here for the database
00:04 and we can get intellisense with the SQL query language
00:08 and with our database tables
00:14 and even with our things, our schema inside there.
00:19 We want to see all the albums that have a preview,
00:23 I think there's just one, yes, that one.
00:26 That's pretty excellent and while I think it's really nice,
00:30 a lot of tools don't have that, it's not entirely blowing my mind,
00:34 because inside the thing that works with the database,
00:38 right here is the schema, like good job JetBrains
00:41 but not entirely blowing my mind,
00:44 but let me show you something that did blow my mind when I first saw it,
00:47 and I think it will blow yours if you haven't seen this.
00:50 Let's suppose we just have some random Python file, super important,
00:53 random python file, it has nothing to do with SQLAlchemy,
01:01 the only thing that makes what I am about to show you happen
01:05 is the fact that we have this data source registered okay?
01:09 So we'll have def, some method,
01:12 and suppose we're not using SQLAlchemy, right,
01:16 SQLAlchemy has its own style with its own classes
01:18 and it has Python level autocomplete
01:21 because you're just working with the type,
01:23 but sometimes you want to work directly with SQLAlchemy,
01:26 or any SQL related database,
01:29 so you're going to write some SQL embedded in a string in Python,
01:33 so you might say this query="" and in this string
01:37 you'll say basically select * from album,
01:42 okay, so let's write this, just watch the words here
01:47 so select— nothing, *— nothing
01:51 from—oh, wait at a minute, look at that
01:57 select * from album or track,
02:01 that is full on autocomplete inside an embedded string,
02:06 inside a Python back into our data model.
02:10 That is super awesome, let's do this one
02:13 and soon as I have a really simple query statement
02:17 or any kind of reasonably structured SQL statement
02:21 it turns into full intellisense, so I could say now I get
02:25 where, join, all of the stuff that you would expect,
02:30 including— check that out, exactly the same where has_preview is true
02:36 and what else— control space brings up the rest of the list,
02:41 we could do a join over an album,
02:43 so we could say the year is greater than 20,
02:49 I don't know, whatever, 2001, something like this.
02:53 Now it even says the SQL dialect is not configured
02:56 so why do we care about a SQL dialect anyway?
02:59 One of the beautiful things about working with SQLAlchemy is
03:02 it adjusts automatically to the dialect that you're working with,
03:06 different databases have annoyingly slightly different
03:11 query syntaxes and ways of working with parameters,
03:14 so in SQL server you would say add name,
03:19 if you had a parametertized query where you passed thing called name,
03:26 I think in Oracle you have question mark
03:28 and it's based on the order in which you pass them in,
03:31 but they're not the same, which is annoying
03:33 and so we can come over here and we can go
03:36 if you don't know where it is, you can just type SQL dialect
03:39 but it's under language and framework SQL dialects,
03:41 we can say for this project I am working with SQLite
03:44 or I am working with SQL server or whatever,
03:48 so we hit ok, I come back, and it's down with one more warning
03:54 but that has nothing to do with the embedded SQL,
03:58 that just has to do with the fact that we need to format that code.
04:01 Sweet, huh?
04:03 When I first saw that that just blew my mind,
04:05 I'm like wow, I get full on schema based intellisense or autocomplete
04:10 in embedded SQL strings— I love it, I still hate writing raw SQL,
04:15 but this sure makes it more patable for as far as I'm concerned,
04:19 but given a choice, let's stick to SQLAlchemy or something like that.
