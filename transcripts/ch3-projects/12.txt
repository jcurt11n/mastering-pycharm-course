00:01 If we open a project and it has a requirement.txt file
00:06 PyCharm understands this,
00:08 so these requirements are often here
00:10 for complex applications that require many dependencies
00:13 or maybe it's some kind of package itself that has dependencies
00:17 like let's say Requests, you're working on the Requests package directly
00:22 or you've even created Pyramid web application
00:25 which each web app is itself a package that has a bunch of dependencies.
00:29 When you open one of these in PyCharm,
00:31 it inspects the target selected interpreter
00:34 and it says are the required libraries installed?
00:38 In this case you can see that they're not
00:41 whatever interpreter we have set up to run
00:44 you can't really tell from this window,
00:47 PyCharm can say Requests, BeautifulSoup and Colorama are not satisfied
00:52 so how does it know what these requirements are?
00:54 Well, if you open up the requirements.txt
00:57 you can see those are the three that are listed right there
01:00 and it's the fact that these are listed in the requirements file
01:02 but not actually installed in the interpreter
01:05 so PyCharm is saying hey, these are required, you have to install them.
01:08 Installing stated requirements is really awesome,
01:12 but another problem that you can run into is
01:14 you can create a rich, complex application
01:17 and forget to put some of the requirements into this requirement.txt file,
01:21 this is what tells everyone what you need to run
01:24 and if you forget let's say, we're using 6
01:28 or we're using some other thing
01:30 that won't get pulled in by any of the requirements here
01:32 let's say SQLAlchemy for example,
01:35 if we forget to list it here, our app will not run.
01:38 So, what we can do is actually PyCharm knows this
01:43 and will fix it in both directions, so the previous example
01:47 was you have stated there are requirements that are not here
01:51 and we're going to install them for you;
01:54 it will do the reverse, like let's look at this—
01:56 Uplink is a really cool api package
02:00 for basically mapping classes to apis on the client side
02:03 if you don't know about it, check it out, it's super cool,
02:06 but it's an external package that we need to state that we depend upon
02:10 so here we are using it, we've imported it
02:12 but we haven't actually gone back to the requirements file
02:15 and PyCharm gives us a little squiggly
02:17 and if you expand out, there's like a light bulb,
02:20 if you expand out what it says it wants to do for you
02:22 it says, it looks like this Uplink is something you're using,
02:25 we know that's a package, but it's not actually listed as a requirement
02:30 so if you click here, we'll go ahead and put Uplink in requirements.txt
02:34 so that people who get your application, know exactly what they need
02:38 and when they run pip install-  requirements.txt
02:41 it's going to actually be ready to run.
