00:01 Let's begin our exploration of this git flow in PyCharm by creating an issue.
00:05 Let's suppose one of the problems is our little podcast downloader thing
00:10 it doesn't get the latest episodes, potentially,
00:12 there's actually no way for it to know what the latest episodes are
00:17 the way that we created the api.
00:19 I'm going to come over here and say add latest episode tracking
00:25 that's not a great word for it,
00:28 but we'll go with that the latest episode tracking for downloader.
00:33 I'll assign it to myself, I'm going to label that as an enhancement.
00:37 This is the description, so we'll come back to that later.
00:43 We have our issue being created,
00:46 and our issue is a number 2, remember that number.
00:51 So we'll go over to PyCharm, and first of all,
00:53 notice we have no pending check in changes
00:56 and we can also update to make sure we have the latest,
00:59 we're on master, all files are up to date, great.
01:03 Now what we want to do is, I would like to work with that work flow
01:07 I would actually like PyCharm to know about not just git
01:10 but github and the issues— how do I do that?
01:12 Well, it's not anything I've shown you yet
01:15 it's hiding up here under tools, not under version control.
01:18 So if we go to tools Tasks & Contexts,
01:22 we can go over here and configure servers
01:24 this is a lot not obvious, but this is how you do it,
01:27 you go to servers and you say, I'm configuring—
01:30 look at all those bug tracking things, YouTrack, Jira, FogBugz,
01:36 Trello, GitLab, but we're going to add github.
01:42 So I'm going to come over here and I am going to put my username
01:45 and then we need the repository name, so that is this part right there
01:52 I am going to put that there, and now what I need to do is
01:54 put an api token in there and I could press create
01:57 but this is actually kind of sensitive, so I'm not going to show you this.
02:01 Okay, I pressed okay, and notice up here,
02:07 I was kind of hiding that, played with it a bit,
02:09 this little default task thing has appeared,
02:12 and if I go under tools, task, I can now open a task
02:17 either way I could do it here or there, but if i click on this
02:20 notice that I get some stuff right here,
02:24 we have random common things that we've done recently,
02:27 these are like check ins and stuff or I can hit open.
02:30 Now, if you wait for a second, this will download the various issues
02:34 so these are basically repository name-issue number 2
02:41 so add the latest episode tracking for downloader,
02:44 yes that's what we want to do, let's do that.
02:45 So I click it and it says okay great,
02:47 what we're going to do is we can clear the current context,
02:51 we're going to create a change list for all the changes
02:53 we could even shelve pending changes, if I had them;
02:55 create a new branch, I don't like this name here
02:58 so I like to do this in mickeckennedy username something about the issue
03:03 so we'll say 2-track feature, or let's call it track latest.
03:09 Okay, notice we're going to branch it from master here
03:14 or we could actually use an existing branch if we want
03:17 but I'm going do this git work flow
03:19 go to the issue, create a branch, a feature branch for it,
03:22 base it on master so when we merge it back
03:24 it's going to go back into master and we'll go from there.
03:27 So immediately notice down here,
03:29 we're in this new local branch that's getting checked out
03:32 up here it tells us what we're working on, things like that
03:35 and we'll just go do our work.
03:37 So let's go down here, and the reason that we don't really know the ending,
03:42 is if we look at this api in this thing
03:45 there's really only two functions,
03:47 there's download and then there's get_an_episode,
03:49 give it the id and you get it back, maybe.
03:52 So, notice that here's a dictionary and it contains the keys the episode id
03:59 so let's say get count, or let's say get latest show id
04:06
04:09 down here we'll just do something like return max of episode_data.keys
04:14 all right, we'll probably test if that works
04:20 let's go up here, do a quick little print,
04:24 print working with total format service.
04:32 now we should have get our latest show id,
04:38 and then we'll use this again down at the bottom,
04:41 so instead of going to random, we'll do that plus one
04:45 so we're always working on the latest.
04:47 Let's go and give this a run and see if it's working.
04:51 Hey look at that, if we go at the top
04:55 we're working with 140 episodes, let's see if that's right.
04:59 Go to the episodes, 140, beautiful,
05:05 so it looks like that is working and we're happy with it right,
05:08 we've tested it, we made all of our changes.
05:11 Okay, so what we're ready to do,
05:13 notice, we have pending changes, both these were changed
05:15 and we're going to go over here and I would like to close this task
05:19 tools, task say close active task
05:26 and when it says that, it's like okay what do we want to do,
05:28 do we want to commit the changes,
05:30 do we want to merge the branches back together;
05:32 do we want to update the issue state to make it resolved?
05:36 So notice over here, if I refresh— still open.
05:40 Okay, let's do it.
05:43
05:49 So we've deleted the branch, we've merged it into master,
05:52 notice we're back on master here, go over here refresh
05:59 the issue state is now closed,
06:04 and do we have a closed pr? No.
06:07
06:11 So you can see that was all done,
06:13 if we go back to our master branch,
06:17 we've got this change that happened just a minute ago,
06:22 let's go look and see if it actually made the change here.
06:26
06:29 It looks like it did not, so all we have left is this sort of "random gets" so check that in,
06:33 so over here we just have the two functions
06:35 we have download and get episode
06:38 so we're missing or get link
06:41 because we have not yet actually created the pr for this
06:45 so we got to go over here and say
06:48 compare this so this fixes issue number two,
06:54 notice, we even get little intellisense, thank you github.
06:56 So we can go create this pr,
06:59 maybe someone else or even me will come along and say,
07:02 oh look there's an open pull request I need to deal with it,
07:05 in here and I can merge it, confirm my merge, change
07:12 if I really want I could delete that branch
07:15
07:17 if we go back to master,
07:20
07:25 we now have this check in here, not the greatest name
07:28 but if we look at service, we have our new little feature thing,
07:33 it's hard to call it much of a feature, but you know what, there it is.
07:37 Now if we go over here and we look at it,
07:40 do we have it yet— yes, it is merged in locally
07:44 PyCharm did that for us, but it didn't do the pr
07:47 actually, the more I think about it, probably following the git flow
07:50 I don't think I would merge it locally into my branch
07:52 or close the associated issue,
07:55 I think I would go over to github and do that
07:57 but if you're not working with github maybe it makes more sense to do it this way.
08:01 Either way, so if we go over here and we look to push our changes back
08:05 notice, first of all, there should there be nothing to commit
08:11 other than unversioned files, if we over here and we do a push, git push
08:16 we have this local merge that we did there,
08:20 I don't think that we really need to do that let's just do an update,
08:23
08:28 alright, all files are up to date, now there's no change left to commit
08:33 because we kind of did it in those two places right
08:36 like I said, I would do this in github rather than just in PyCharm.
08:40 Now we can go over here and just go back to our default task
08:43 it says our empty change list is no longer active, that's great
08:47 so let's just get rid of it.
08:50 Alright, there you have it, that's the git flow in PyCharm.
