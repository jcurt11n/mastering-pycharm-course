00:01 Let's kick off this refactoring session by first looking at the structure of our code.
00:05 I still have or git repo up here, it says project course,
00:09 which is not amazing, we'll fix that in a minute.
00:11 And I've just decided to create one project that opens all of it,
00:14 and I have copied in this slightly altered Wizard code from my Jumpstart course
00:20 remember, it's called the wizard code,
00:22 because over here we have Creatures and Wizards which derive from them
00:26 and we have Small Animals, and we have Dragons, things like that.
00:31 So it's a little game, we're going to make this game a little bit better,
00:35 partly by removing some issues I've introduced.
00:38 Let's just say we haven't really looked at this code
00:41 and I would say probably the most significant issue
00:43 you're going to run into with refactoring is duplicate code.
00:46 Second to that, maybe tied with that is extremely long methods
00:51 or extremely large classes that should be broken apart,
00:54 and it turns out the solution for both of those is really often the same.
00:59 So, let's start on the duplicate code side.
01:02 Now, if we look at refactoring up here,
01:04 you'll see there's a hotkey that always let us refactor anything,
01:08 so if I was down here and I highlight this,
01:10 I could hit CTRL T on Mac, I think it's something else on Windows,
01:13
01:18 we can pick, extract variable, extract the constant,
01:22 extract a parameter, all these different types of things here.
01:25 But let's take a moment and not necessarily use this,
01:30 we could extract different things, pull members up and down, move,
01:33 we'll talk about what that is, change a signature methods and so on.
01:37 But before we apply the refactoring, let's ask where is the problem?
01:41 Is there a problem?
01:43 Well yes there's a problem, there's always a problem with code,
01:45 the question is— is it significant enough that a change will make it better?
01:50 Alright, so watch this— we go to code,
01:52 this is a pretty amazing feature, locate duplicates.
01:57 Now, if we run this, and we pick the whole project,
02:01 we could do one file or whatever;
02:03 actually it'll do this for many different types, Javascript, Python, html and so on.
02:09 So we're going to use Python, and you can anonymize certain things like
02:13 look for the same structure but ignore the details
02:17 of say like a string and a number
02:19 but if you're taking a string and a number to it
02:23 and then doing something else, then it's always the same that sort of series,
02:26 if I were to check this that would signal as a duplicate.
02:29 So we've got our options set here
02:31 and we can just go and run it and watch this
02:34 bam— across this entire project, we have found two sets of duplicates,
02:40 check this out here, let's see if we can make a little more room.
02:44 If we open this up in Actors, in the Wizard
02:47 and we can actually jump between them
02:50 so over here, we are in the Dragon,
02:53 notice there is a little hierarchy which is really sweet,
02:55 this is kind of new in PyCharm.
02:57 So we're in the Dragon, and in the init we're checking if the level is less than one
03:01 and in Actors, over in Creature, we have the same thing.
03:07 So this is not the most amazing thing,
03:10 we're actually doing this exact same test twice,
03:13 and let me open up the dragon here,
03:16 it turns out, whoever wrote the Dragon class
03:19 decided they want to check to make sure the level is good
03:21 but they didn't realize this is actually being called here as well,
03:24 so there's no need for us to call it here
03:26 because this line will already raise this value error,
03:29 so we can just remove that duplicate,
03:31 and let's run our find duplicates again.
03:33 Alright, now we're down to this one set of duplicates
03:40 but there's three of them and notice,
03:43 I can use these little arrows to change
03:45 like if I want to and do a diff, this one against that one over here,
03:48 so you can like move these arrows around, pretty cool.
03:50 So it says these are identical, they don't have to be identical,
03:53 but notice there is this representation that appears multiple times
03:59 and if we just jump to it, you'll see that what we're doing is
04:04 when you print out a Small Animal it says
04:06 here's a creature of this level and with this name.
04:09 But the dragon does the same thing and the wizard does the same thing,
04:12 but they all derive from Creature, so what we would like to do
04:16 is move this sort of just into the Creature
04:20 so we could come down here and the Wizard has the same problem,
04:25 so let's just focus on the Wizard for a minute.
04:27 So down here, I could hit CRTL T to refactor
04:30 and I could say pull members up in the hierarchy.
04:33 So what I'm going to do is I am going to
04:35 automatically move this from the Wizard into the Creature,
04:39 so it's part of the base class.
04:41 Hit that— boom, done.
04:44 So it's out of the Wizard, if I look at the Wizard the Wizard just has attack,
04:47 and now, we have the Creature there init
04:53 defensive role and now they have this representation,
04:56 and because it's in the base class, and it's the same,
04:59 the Small Animal doesn't need it,
05:02 and the Dragon doesn't need it explicitly
05:04 because they all derive from Creature
05:07 and if we run it, it should still totally work fine, let's see.
05:10 We run it, a level 12 Tiger has appeared,
05:14 we are going to attack that, a Dragon has appeared,
05:17 so you can see this is the little print, the representation thing,
05:21 I think somewhere around here, it's showing up.
05:25 But the idea is we can use these duplicate code plus refactoring
05:29 to improve our code and it's fine on this little example of two files
05:35 but if I had a hundred files, you would see this would be way more valuable
05:39 because it would make sure the whole thing was hanging together.
