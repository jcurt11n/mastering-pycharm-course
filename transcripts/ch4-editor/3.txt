00:01 The first thing you probably noticed when we opened up PyCharm
00:04 and it should be really no surprise,
00:06 is that we had nice syntax highlighting.
00:09 Of course, it highlights the keywords, it highlights the methods,
00:13 it highlights strings, and this is actually really configurable as you'll see.
00:17 You can pick different themes and so on,
00:20 but the syntax highlighting is super nice.
00:23 In fact, if you go to the preferences and go to appearance
00:26 you can see the theme that I'm using is Darcula,
00:30 but you can actually pick other themes
00:32 so here's Darcula, and on the right is just the I guess it's called default,
00:37 I don't know white, boring, who knows,
00:39 so there's another theme, this is another one built-in
00:41 but you can actually go and download a whole bunch of other themes
00:44 and import them and even create your own.
00:47 The other thing that you can control which is part of the theme
00:52 but is very fine grained, you can control it super easily
00:56 is the syntax highlighting colors.
01:00 Here you can see the path in the preferences
01:03 so you can go over here to the color scheme say Python
01:06 and change the color of decorators
01:09 or change the colors of strings or operators and all these things.
01:13 All you've got to do is like here we click decorator
01:15 and on the right where it says foreground it has some sort of yellow color
01:18 you click that color and a color we look comes up, and you can pick it,
01:22 or you can either take the sort of global definition,
01:26 I'm sure there is not one for decorators
01:28 but for things like strings that would be.
01:31 You can grab the global definition for that or for colors
01:34 or you can create your own basic style.
01:37 So, you can create a style that is exactly the way you want
01:40 by going into this part of the menu preferences and just really tweaking it,
01:45 it takes a long time actually to get it right,
01:48 but once you do it's super sweet
01:50 and you can see you can also do the same for CSS, for Javascript
01:53 for Cucumber test scripts you know, you name it,
01:56 you can mess with it down here,
01:59 so tons and tons of features around customizing the colors,
02:03 and you can export those for other people on your team
02:08 or on the internet to play with.
02:10 We saw that auto complete was a super important thing
02:13 and it really helps with discoverability for large code, new code,
02:18 code that you picked up but you don't really know super well, things like that,
02:22 even learning the standard library really well
02:24 because you get great auto complete on all of those things.
02:27 Here we have a wizard named Gandolf, level 75, we created him,
02:31 we want to do some stuff, so we say hero.
02:34 and right away we can see the wizard class defines an attack method
02:37 the wizard class derives from creature
02:40 which has a get defensive role a name and a level,
02:43 so we could work with that as well.
02:45 If we want to go way down to the Python data model
02:48 heck we could go and work with a __dict__
02:50 that actually comes from object which is the base class of creature.
02:53 So over on the right you can see the source
02:57 of actually where that method or that property or field is coming from.
03:02 Now, sometimes, it's not so amazing
03:05 here we have data access library, we're calling find user by email address
03:10 it's going to the database and it's doing a query
03:12 and it's returning this user say SQLAlchemy or MongoEngine
03:16 or any of the ORMs, is doing a query and it's pulling back these objects
03:20 and almost all of those has given us proper intellisense as you'll see
03:24 you're like why do you not know what comes back from this query
03:27 it's always a list of users or something like that.
03:30 There will be times, and you saw this in our demo
03:34 where adding a little bit of a hint just at the lowest level
03:38 usually is all that's required to help PyCharm
03:42 to help other linters really know what types you're working with.
03:45 So over here we are doing this query
03:48 that turns out to be a MongoEngine query
03:51 and it's totally fine and it works,
03:54 but it doesn't tell the editor enough information
03:57 to really give us the help that we might want.
03:59 So what do we do?
04:01 If we go and we add some types hints,
04:04 like it takes a string and it returns an optional user there might be none
04:08 or there is going to be one, it could be none or the actual user object
04:12 so it first does that's what we should have done in our demo actually
04:15 and once we do that— boom, PyCharm comes alive
04:18 and anywhere we use this object that came back from find user by email
04:22 is definitely a user you can see right there in the auto complete source
04:26 that thinks all these things come from user, and it's right.
04:29 So these type hints can dramatically improve auto complete
04:34 and discoverability as well as some of the linting, so use them judiciously
04:39 but when you're crossing major application boundaries
04:43 especially down to data access layer and lowest level of service layers,
04:46 these can be really, really useful.
