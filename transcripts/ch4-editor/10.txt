00:01 Let's explore the object-oriented features,
00:04 features for working classes and type hierarchies in PyCharm.
00:08 So over here, notice this is the code from my Python Jumpstart course
00:12 which is right here, we just git cloned that in one of the earlier videos
00:16 in case you're jumping in the middle,
00:18 just go here check out app seven final, that's what we're working with.
00:22 Over here we're importing a couple of classes
00:26 a Wizard, a Creature, a Small Animal and a Dragon,
00:28 and we'll go check this out in a second
00:31 but the creature is the base type
00:33 and then we have a Small Animal and a Dragon,
00:36 both deriving from Creature and then Wizard as well.
00:40 So let's go over to this actors thing
00:43 we can use double search or so, just hit A and look,
00:47 there's actors right there,
00:49 obviously, it's small enough we could click over and find it
00:51 but notice, we have this type hierarchy, here we've got our Creature
00:56 the Creature is kind of the base type
00:59 and it implicitly inherits from object in Python 3, it's as if we wrote this,
01:04 but we don't have to because it's Python 3,
01:09 so down here we have things like the __init__
01:13 and notice this is saying that this is overwriting
01:16 or is overwritten in Dragon for example among other places.
01:20 This class is derived from by Wizard, Small Animal and Dragon,
01:26 that's pretty super cool, right,
01:28 and this is part of the Python data model, this actually comes from objects
01:31 we're overwriting this from object.
01:36 Now, here, this get defensive roll
01:39 this is itself overwritten somewhere else
01:42 so let's play the game real quick,
01:45 now remember, we could just click here and run it
01:46 but I'll show you one other way to run our code
01:50 just because sometimes this has console colors and whatnot
01:54 and you just want it in a proper terminal
01:56 so I could do this copy, copy path open this up, clear that out
02:01 we'll just say Python 3 and boom, there it goes,
02:05 well I guess it doesn't have console colors but that's all fine.
02:07 So what we could do is we could look around
02:09 and we could see that there is a Toad of a certain level,
02:12 a Tiger, a Dragon, an Evil Wizard
02:15 and then we could say I would like to attack the Bat of level 3
02:18 that has appeared from the dark and foggy forest.
02:21 The Wizard has handily triumphed over the Bat,
02:24 now a Tiger a is here, we could attack it,
02:25 a Dragon— we've been defeated and so on.
02:29 The idea is we play this game, it's very simple
02:32 but you basically have these attacks that the Wizard can do
02:35 and all the creatures can have a defensive roll,
02:37 some of them like we have over here
02:40 the Small Animal and the Dragon have different types of defense
02:45 than the standard Creature,
02:47 well, we can use this to discover information about the type
02:51 but we can also use this to navigate,
02:53 so watch this, if I want to go over here
02:55 to where this is all written by Dragon I click,
02:57 boom, I'm in the Dragons __init__ where it's overwriting the Creatures
03:01 and then, of course, we are doing this super here.
03:04 We're also capturing whether the Dragon breathes fire,
03:07 capturing its level of scaliness, things like this.
03:10 This works in reverse too, get defensive roll, that says
03:14 this is overwritten from Creature, click on that, it takes us back to Creature.
03:17 It even, and so much as we can understand
03:20 information about the standard library works there as well
03:24 so this will take us to the representation method in object
03:29 but because it's implemented in C you don't know so much,
03:33 not all of the standard libraries implemented in C though
03:35 and if there was some piece that was written in Python
03:38 it would take us straight to that and that would be awesome.
03:40 So you can see whenever we're working with these type hierarchies,
03:42 we get nice little tips about what we're doing
03:46 and this can let you know like should you call
03:48 things like the super base method or not.
03:52 So here the small Creature is like half as defensive as a standard Creature
03:56 because it's small and wimpy, right
03:58 that's kind of what this implementation says.
04:00 For the Dragon, there's a bunch of different modifiers that we can have here,
04:05 we tried a few attempts in the course that actually wrote this code
04:08 to come up with it and talk about some of the expressions here
04:11 but basically, whether you're scaly, whether you breathe fire
04:14 these affect how defensive you can be as a Dragon.
04:18 You can see they are pretty tough to beat
04:19 a scaly fire-breathing Dragon is super hard to beat in this game.
04:23 But, hopefully, that gives you a good sense of some of the objects or features
04:26 the other things that you can notice maybe is if I type self.
04:30 I get Dragon features as autocomplete,
04:34 I get Creature features from the base type, and I get object features,
04:39 so you immediately get things like autocomplete
04:41 throughout the type hierarchy as well— pretty awesome.
