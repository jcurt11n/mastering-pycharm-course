00:02 One of the more significant things that PyCharm does to help us
00:05 is what I call light bulb moments.
00:09 So when you are in some error situation,
00:12 PyCharm will say, hey it looks like something's wrong, but I can fix it,
00:16 if it's yellowish like this one, I am pretty sure it's an error
00:21 other times it'll be red and they are like,
00:24 no, there is no chance this is going to work, I'm sure of it.
00:27 It depends a little bit on the severity of the situation
00:30 because it can do many different things
00:32 so the color of the light bulb tells you a little bit
00:35 but what PyCharm is saying is your code is not right
00:37 but I can fix it for you and I can do that most of the time automatically
00:42 if you just agree to it, so what's happening here?
00:45 Well, we have this data access library
00:47 but it doesn't have a change_address function
00:51 but we're creating this, we're writing this bit of code
00:56 this is the first time we're ever going to need to change_address function
00:59 and we're just about to switch over to data and write it.
01:03 But we want to kind of sketch out our use case of it here
01:05 and then we are going to go write it.
01:07 The thing is, you don't have to switch over to data and write it,
01:10 PyCharm will do that for you.
01:12 So if we hit alt enter, you'll see it will pull up a list and it says
01:16 hey how bout I create a function called change_address in the modular data
01:21 and it would actually have first parameter called user
01:25 and the second parameter, like parameter 2 or something
01:28 because it has no idea what that string means
01:30 but it would be a place holder for the email.
01:33 So we hit this and it will actually create the skeleton of the function
01:36 in the right place for us and then we can go just sketch out the implementation.
01:39 That's really awesome, so we hit enter and it goes boom
01:43 down here just like that.
01:46 And down here we may be want to type new email and implement the thing.
01:49 It'll go create this inside a data.py
01:54 when we are trying to access it from program.py.
01:56 Really nice. So you'll see these little what I call light bulb moments
02:00 or code helpers, all over the place.
02:02 Now they don't just mean hey a function is missing
02:05 they can do all kinds of stuff so if we look at those
02:08 we can create a function or a class from a particular usage
02:13 that's what you just saw;
02:15 we can also say import a module, so if I type xml.etree.ElementTree
02:22 but I don't have the import at the top, PyCharm would propose
02:25 one of these little light bulb moments to say
02:28 you know, you should import that at the top and then it's going to work.
02:31 It doesn't do that for external packages all the time
02:33 if it finds something else that could have been a candidate
02:36 and that's kind of what happened in my request example
02:38 but it will basically import the module
02:41 we also saw that we can install packages from that as well.
02:44 So we can do micro refactoring,
02:48 this code, it has parentheses around if statement
02:53 there's no need for that, we can take them away,
02:55 and other little things like that.
02:58 It can find dead code and sort of clean that up for you.
03:01 I showed you the example of that unused show_id right,
03:06 there's some little code helpers around that.
03:09 It can find pep 8 violations and fix those
03:12 it can even fix performance issues
03:15 if it knows you're using some pattern that is sub optimal
03:18 but it can automatically rearrange it to a better one
03:20 it will propose that it automatically fixes that for you.
03:23 It could be aware of Python 2 and Python 3 differences or mismatches
03:30 and fix those four you as well, it doesn't always turn these on,
03:33 but if it's pretty sure you're mixing Python code from 2 and 3
03:37 it will give you a little pop up that says hey, should we turn on
03:41 this Python 2/ 3 compatibility checking for you?
03:44 And if you say yes then it will propose to fix that.
03:47 It has all sorts of things around package maintenance,
03:50 one example is if I have a package that it's using a dependent package
03:55 like one package is using say Requests or SQLAlchemy,
03:58 it will propose to put those inside of the requirements.txt
04:04 if it doesn't find them in there, stuff like that.
04:06 Tons and tons more, you'll see these pop up all over the place
04:11 and really it's tough to find all of them and list them here
04:14 because it just does so many little things
04:17 so keep your eye out for any time you see a little light bulb
04:19 hit all enter, see what it's proposing
04:22 sometimes that is 2 or 3 different things it's suggesting for you.
04:25 You'll get used to what it can do and this is really helpful when you are new
04:29 but it's also really helpful when you are an expert
04:32 so when you're new, it's like I don't know what to do
04:35 oh it says it can fix this in this way great I guess that'll fix it.
04:38 Whereas when you're an expert, like
04:41 yes you could go track down the requirements.txt file
04:43 and write SQLALchemy in there
04:47 or you could just hit alt enter and keep coding
04:49 and not have to worry about that and stay in flow.
04:52 So I think this is a great feature for all levels
04:55 but it offers different things to different levels.
